
0. Labels
-------------------------------
[ ] - Didn't checked
[v] - Done.
[c] - Checked by test code
[m] - Checked by manual inspection


1. Branch
-------------------------------
[v] Branch (const string& location, const int capacity)
    [v] - Default constructor with "~" for location, 0 for capacity
    [v] - capacity saved in const variable
[v] Copy constructor
[v] Destructor
[v] void addItem (Item* item) throws()
    [v] - Check for exception when added more then capacity items
    [v] - Check for uppending at the end of the vector
[v] Item* deleteItem (const int ID) throws()
    [v] - Check for exception on non existing ID
[v] vector<Item*> getCatalog ()
[v] void print_catalog_by_id() const
[v] void print_catalog_by_price() const
    [v] - Check for stable sort
    [v] - Check when price changed
[v] T* retrieveFinest(T* item) throws()
    [v] - Check exception when no item of type T in the brunch
[v] string getLocation () const
[v] void setLocation (const string& location)
[v] int getCapacity() const
[v] ~Branch()
    [v] - Does free the pointers


2. Item
-------------------------------
[v] Item (const int price, const string& manufacturer)
[v] void setPrice (const int price)
[v] int getPrice () const
[v] int getId () const
    [c] - Check right chronology of items
[v] void setManufacturer (const string& manufacturer)
[v] string getManufacturer () const
[v] virtual operator string () const = 0
[v] virtual ~Item ()


3. Computer  :  Item
-------------------------------
[v] Computer (const int price, const string& manufacturer, const string& cpu, const bool isLaptop, const int ports)
    [v] - Check ports variable set const
[v] void setCpu (const string& cpu)
[v] string getSpu () const
[v] void setIsLaptop (const bool isLaptop)
[v] bool getIsLaptop () const
[v] int getPorts () const
[v] operator string () const override
    [v] - Use item's operator
[v] void print_connected () const
    [v] - Stable (First added should be first printed)


4. PeripheralDevice  :  Item
-------------------------------
[v] PeripheralDevice (const int price, const string& manufacturer, const string& color, const bool isWireless)
[v] void setColor (const string& color)
[v] string getColor () const
[v] void setIsWireless (const bool isWireless)
[v] bool getIsWireless () const
[v] virtual void connect(const Computer& computer) = 0
    [v] - Check right print on casted argument e.g. PeripheralDevice* mouse = new Mouse()
    [v] - Try minimazing code duplication
    [v] - Exception connecting to more then one computers
    [v] - Exception when two items of the same type connected
    [v] - Exception when more connections then ports
    [v] - Do notting when connecting the same computer
[v] void disconnect()
    [v] - Do notting when not connected
[v] virtual operator string () const override = 0
[v] ~PeripheralDevice ()
    [v] - Disconnecting from computer


5. Keyboard  :  PeripheralDevice  
-------------------------------
[v] Keyboard (const int price, const string& manufacturer, const string& color, const bool isWireless, const int numOfKeys)
[v] void setNumOfKeys (const int numOfKeys)
[v] int getNumOfKeys () const
[v] void connect(const Computer& computer) const override
[v] operator string () const override
    [m] - Use PeripheralDevice's operator


6. Mouse  :  PeripheralDevice  
-------------------------------
[v] Keyboard (const int price, const string& manufacturer, const string& color, const bool isWireless, const int dpi)
[v] void setDpi (const int dpi)
[v] int getDpi () const
[v] void connect(const Computer& computer) const override
[v] operator string () const override
    [m] - Use PeripheralDevice's operator


7. Webcam  :  PeripheralDevice  
-------------------------------
[v] Webcam (const int price, const string& manufacturer, const string& color, const bool isWireless, const string& resolution)
[v] void setResolution (const string resolution)
[v] string getResolution () const
[v] void connect(const Computer& computer) const override
[v] operator string () const override
    [m] - Use PeripheralDevice's operator


8. HWExceptions  :  exception
-------------------------------
[v] ExistingItemError
[v] FullCatalogError
[v] NonExcistingItemError
[v] NoneExcistingItemTypeError
[v] ConnectError


9. MainOffice (Singleton)  
-------------------------------
 ...


10. Notes:
-------------------------------
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Add const for functions / functions arguments / fields
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Maximaze use of reference variables
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Use static functions / static variables
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Use virtual functions
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Set functions abstruct where needed
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Right use of price 'private', 'protected', 'public'
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Set comments
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Check forum for updates and notes
[ ][ ][ ][ ][ ][ ][ ][ ][ ] - Added throws() to functions signature
 ^  ^  ^  ^  ^  ^  ^  ^  ^
 |  |  |  |  |  |  |  |  + Mouse
 |  |  |  |  |  |  |  + Keyboard
 |  |  |  |  |  |  + PeripheralDevice
 |  |  |  |  |  + Computer
 |  |  |  |  + Item
 |  |  |  + Branch
 |  |  + Webcam
 |  + HWExceptions
 + MainOffice


